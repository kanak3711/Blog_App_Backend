package com.example.demo.controllers;


import java.util.List;

import javax.validation.Valid;

import org.hibernate.mapping.Map;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.example.demo.entities.Post;
import com.example.demo.payloads.ApiResponse;
import com.example.demo.payloads.CategoryDto;
import com.example.demo.payloads.PostDto;
import com.example.demo.payloads.PostResponse;
import com.example.demo.payloads.UserDto;
import com.example.demo.services.PostService;
import com.example.demo.services.UserService;

@RestController
@RequestMapping("/api/")
public class PostController {

	@Autowired
	private UserService userServices;
	
	@Autowired
	private PostService postServices;
	// POSt-create user

	@PostMapping("/user/{userId}/category/{categoryId}/posts")
	public ResponseEntity<PostDto> createPost( @RequestBody PostDto postDto
			,@PathVariable Integer userId,@PathVariable Integer categoryId)
	{
		PostDto createPostDto=this.postServices.createPost(postDto, userId, categoryId);
		return new ResponseEntity<PostDto>(createPostDto,HttpStatus.CREATED);
	}
	
	
	@GetMapping("/user/{userId}/posts")
	public ResponseEntity<List<PostDto>> getPostsByUser(@PathVariable Integer userId)
	{
		List<PostDto> posts=this.postServices.getPostByUser(userId);
		return new ResponseEntity<List<PostDto>>(posts,HttpStatus.OK);
	}
	@GetMapping("/category/{categoryId}/posts")
	public ResponseEntity<List<PostDto>> getPostsByCategory(@PathVariable Integer categoryId)
	{
		List<PostDto> posts=this.postServices.getPostByCategory(categoryId);
		return new ResponseEntity<List<PostDto>>(posts,HttpStatus.OK);
	}
	
	//get all posts
	@GetMapping("/posts")
	public ResponseEntity<PostResponse> getAllPost(
			@RequestParam(value="pageNumber",defaultValue="0",required=false)Integer pageNumber,
	@RequestParam(value="pageSize",defaultValue="3",required=false) Integer pageSize,
	@RequestParam(value="sortBy",defaultValue="postId",required=false) String sortBy,
	@RequestParam(value="sortDir",defaultValue="asc",required=false) String sortDir)
	{
		
		PostResponse cat=this.postServices.getAllPost(pageNumber,pageSize,sortBy,sortDir);
		return ResponseEntity.ok(cat);
	}
	///get post detail 
	@GetMapping("/posts/{postId}")
	public ResponseEntity<PostDto> getCategory(@PathVariable Integer postId)
	{
		PostDto categoryDto=this.postServices.getPostById(postId);
		
		return new ResponseEntity<PostDto>(categoryDto,HttpStatus.OK);
				//.getUserById(catId));
	}
	
	@DeleteMapping("/posts/{postId}")
	public ResponseEntity<ApiResponse> deleteCategory(@PathVariable Integer postId)
	{
		this.postServices.deletePost(postId);
		return new ResponseEntity(new ApiResponse("Post deleted Successfully",true),HttpStatus.OK);
	}
	@PutMapping("/posts/{postId}")
	public ResponseEntity<PostDto> updateCategory(@Valid @RequestBody PostDto postDto,@PathVariable Integer postId)
	{
		PostDto updated=this.postServices.updatePost(postDto,postId);
		return new ResponseEntity<PostDto>(updated,HttpStatus.OK);
	}

}
